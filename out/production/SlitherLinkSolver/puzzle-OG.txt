1,?,3,?,3
?,?,?,2,?
3,0,?,?,2
?,?,1,3,?
1,?,?,3,?
?,?,?,0,?


public void applyOneAC(ArrayList<cell> oneCells){
        Queue<edge> essEdgeQueue = new PriorityQueue<edge>();
        cellQueue.clear();
        cellQueue.addAll(oneCells);
        while(!cellQueue.isEmpty()){
            cell cell = cellQueue.poll();
            edge Hij = new edge("H", cell.i, cell.j);
            edge Vij = new edge("V", cell.i, cell.j);
            edge Hi1j = new edge("H", cell.i+1, cell.j);
            edge Vij1 = new edge("V", cell.i, cell.j+1);
            if(cell.value == 1){
                if(!nonEssEdges.contains(Hij))
                    essEdgeQueue.add(Hij);   // H[i][j]
                if(!nonEssEdges.contains(Vij))
                    essEdgeQueue.add(Vij);   // V[i][j]
                if(!nonEssEdges.contains(Hi1j))
                    essEdgeQueue.add(Hi1j); // H[i+1][j]
                if(!nonEssEdges.contains(Vij1))
                    essEdgeQueue.add(Vij1); // H[i][j+1]
            }

            if(essEdgeQueue.size()==1){
                edge edge = essEdgeQueue.poll();
                edgeHM.get(edge).remove("0");
                reduceNodeAssignments(nodeHM, edge, 1);
            }
        }
        System.out.println("");
        System.out.println("");
    }
    public void applyTwoAC(ArrayList<cell> oneCells){
        Queue<edge> essEdgeQueue = new PriorityQueue<edge>();
        cellQueue.clear();
        cellQueue.addAll(twoCells);
        while(!cellQueue.isEmpty()){
            cell cell = cellQueue.poll();
            edge Hij = new edge("H", cell.i, cell.j);
            edge Vij = new edge("V", cell.i, cell.j);
            edge Hi1j = new edge("H", cell.i+1, cell.j);
            edge Vij1 = new edge("V", cell.i, cell.j+1);
            if(cell.value == 2){
                if(!nonEssEdges.contains(Hij))
                    essEdgeQueue.add(Hij);   // H[i][j]
                if(!nonEssEdges.contains(Vij))
                    essEdgeQueue.add(Vij);   // V[i][j]
                if(!nonEssEdges.contains(Hi1j))
                    essEdgeQueue.add(Hi1j); // H[i+1][j]
                if(!nonEssEdges.contains(Vij1))
                    essEdgeQueue.add(Vij1); // H[i][j+1]
            }

            if(essEdgeQueue.size()==2){
                while (!essEdgeQueue.isEmpty()){
                    edge edge = essEdgeQueue.poll();
                    edgeHM.get(edge).remove("0");
                    reduceNodeAssignments(nodeHM, edge, 1);
                }
            }
        }
        System.out.println("");
        System.out.println("");
    }